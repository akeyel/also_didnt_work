{
    "contents" : "#This file is part of the spatialdemography package.  See package information for license & details\n\n#Set up function to evaluate script\n#' SpatialDemography = Main function for running the spatially explicit, matrix-based,\n#' metacommunity model\n#' \n#' This function implements a spatially explicit matrix model based on input\n#' options. Inputs are pointers to files, which contain additional inputs used\n#' by the function to run the model.\n#' \n#' Details for each of the inputs in the input files: Please see Overview,\n#' Design concepts, Details (ODD, Grimm et al. 2006, 2010) description for\n#' SpatialDemography %% Figure out how to link to this here\n#' \n#' @param scn Indicator variable to denote scenario and to extract appropriate\n#' row from initial.conditions.file and settings.file.\n#' @param s.lbl A label used in the construction of the Species file and new\n#' landscape files.\n#' @param file.ending A text string that matches the end of the species file\n#' (either to be gener-ated or that already exists).\n#' @param DispPath The path of the dispersal tables (if existing) or the path\n#' where dispersal tables should be created.\n#' @param run.path The main path for the specific overall model run.\n#' @param opath The path for model outputs.\n#' @param ResultsFile A file to be created containing the model results.\n#' @param initial.conditions.file A file to specify the initial model\n#' conditions. See \\link[spatialdemography]{initial.conditions.file} for details.\n#' @param settings.file A file to specify overall model settings. See\n#' \\link[spatialdemography]{settings.file} for details.\n#' @param env.file A file to describe environmental layers and how they change.\n#' See \\link[spatialdemography]{env.file} for details.\n#' @param spfile A file specifying species traits. See \\link[spatialdemography]{sp.file} for details.\n#' @param sp.instr.file A file to describe how generation of species' base\n#' vital rates is to occur (Optional - not needed if using pre-existing species\n#' file). See \\link[spatialdemography]{sp.instr.file} for details.\n#' @param sp.resp.instr.file A file to describe how generation of species'\n#' response traits is to occur (Optional - not needed if using pre-existing\n#' species file). See \\link[spatialdemography]{sp.resp.instr.file} for details.\n#' @param landscape.dir (not used if generating new landscapes) The directory where the landscape files may be found. See \\link[spatialdemography]{landscape.files} for more information about the files themselves.\n#' @param locations.file (should be \"none\" if spatialdemography is assigning species to the landscape) A file containing initial locations of species. See (\\link[spatialdemography]{locations.file}) for more information about the species locations file itself.\n#' @param scale.vec A list of spatial scales at which to evaluate the model. See \\link[spatialdemography]{scale.vec} for more details.\n#' @param scale.cells.lst A list of cells from the landscape included in each of the above spatial scales. See \\link[spatialdemography]{scale.vec} for more details.\n#' @param out.metrics Metrics to calculate for the model run. See \\link[spatialdemography]{out.metrics} for details.\n#' @param testing An indicator for whether test files are being run. Defaults to F.\n#' @return No direct results are returned from the function.  However, the\n#' function writes several files. See \\link[spatialdemography]{Results.Outputs} for a summary.\n#' @author A.C. Keyel\n#' @template mycitation\n#' @export SpatialDemography\nSpatialDemography = function(scn,s.lbl,file.ending,DispPath,run.path,opath,ResultsFile,initial.conditions.file,settings.file,env.file,spfile, sp.instr.file = \"none\",sp.resp.instr.file = \"none\", landscape.dir = \"default\", locations.file = \"none\", scale.vec = c(\"landscape\"), scale.cells.lst = \"default\", out.metrics = c(\"Sp.Rich\",\"Beta.Div\",\"Biomass\",\"FTD.UTC\",\"RTD.UTC\"), testing = F){\n    #For troubleshooting\n    #landscape.dir = \"default\"; locations.file = \"none\"; scale.vec = c(\"landscape\"); scale.cells.lst = \"default\"; out.metrics = c(\"Sp.Rich\",\"Beta.Div\",\"Biomass\",\"FTD.UTC\",\"RTD.UTC\"); testing = F;\n    #initial.conditions.file = ic; settings.file = set; env.file = ef;\n\n    #Set up script settings that are fixed & load required packages\n    #bpath = getwd()                    #Create a variable for accessing the origianl working directory.  Needed by shiny part of code\n    S = 4                               # Number of stages in the model\n    c.gen = NA                          # This currently does nothing\n    rtd.c = 0                           # Other options are not yet scripted\n    #cell.size = 50                     #Size of cells in the landscape. This is no longer needed - only affects dispersal probabilities and carrying capacity, and those should be put in terms of the cell size external to the model.\n    log.trans = 0                       # input for calculation of UTC - tells it not to use a log-transform\n    resolution = 2                      #Number of decimal places for which to round trait values.  2 is recommended with a log-transform, but that may not apply anymore #**# This is still inappropriate for some columns.  Except if they do not change, it doesn't matter. & only really matters for scaled UTC, which I'm not currently using.\n        \n    start.time = proc.time()[3]         #Get starting time for model run\n\n    #Set up timing information for simulation (or move this outside too, and pass in as arguments?)\n    run.times = c(); run.lbl = c()  #Semi-colons allow multiple commands on the same line!\n    #run.times = c(run.times,gettime()); run.lbl = c(run.lbl,\"loading files and packages completed\")\n\n    #check that scn is a number\n    if (is.na(as.num(scn))){\n        stop(\"scn input must be numeric, not character.\") }\n\n    #Check if initial.conditions.file is a string object or has already been read in as an R object\n    if (typeof(initial.conditions.file) == \"character\"){\n        #Read in initial conditions file\n        ic = read.csv(initial.conditions.file,row.names = 1,na.strings = \"NA\")\n    }else{\n        #Use the initial.conditions.file input as is without reading in.\n        ic = initial.conditions.file\n        }\n\n    ic = ic[scn, ] #Restrict data in memory to only that pertaining to the scenario at hand\n\n      #Convert initial conditions to variable names\n        #Note: some of these columns should only be read in if they are applicable.  Then you can have them be optional.\n      Model.Name = as.character(ic[[\"ModelName\"]])\n      extent = as.num(ic[[\"Extent\"]]) #as.num is a custom function from myr.r\n        p = extent ^ 2                                    #Not from ic, but defined here because it is related to the extent\n      edge.type = as.character(ic[[\"Edge.Type\"]])           #Options are TORUS and ABSORBING\n      MaxTime = as.num(ic[[\"MaxTime\"]])\n      K_g = as.num(ic[[\"K_g\"]])\n      multi.species.K = as.num(ic[[\"multi.species.K\"]])\n      competitiontype = as.num(ic[[\"competitiontype\"]])\n      microsites = as.num(ic[[\"microsites\"]])\n      invasion = as.num(ic[[\"invasion\"]])\n      num.invaders = as.num(ic[[\"num.invaders\"]])\n      cells.to.invade = as.num(ic[[\"cells.to.invade\"]])\n      repro.proportion = as.num(ic[[\"invader.repro.proportion\"]])\n      #num.adult and starting.biomass are extracted if/when needed\n      tot.sp.num = as.num(ic[[\"Tot.sp.rich\"]])\n      #land.sp.num, patch.sp.num, target.tot.rtd, land.rtd, loc.rtd now extracted at the relevant point in species assignment.\n      \n    #Read in settings file (or leave as is, if it is an R object\n    if (typeof(settings.file) == \"character\"){\n        settings = read.csv(settings.file,row.names = 1)\n    }else{\n        settings = settings.file\n        }\n        \n    settings = settings[scn, ] #Restrict settings to only the scenario at hand.\n\n      #Convert initial settings to variable names (note: some settings are read in later in the script, only if needed.  This maintains backwards compatibility and allows for smaller file sizes (optional columns then are not required.)\n      vdb.data = settings[[\"GenerateVisualDebuggerData\"]]\n      #vdb.run =  settings[[2]]\n      generate.spp = settings[[\"GenerateNewSpecies\"]]\n      new.landscape = settings[[\"GenerateNewLandscape\"]]\n      lnd.lbl = as.character(settings[[\"lnd.lbl\"]]) #Will come in as null if field is missing\n      include.copula = settings[[\"include.copula\"]] #This will come in as NULL if there is no \"include.copula\" column.  For once in my life, that is convenient.\n      #rtd.classification = rtd.c = settings[[\"rtd.c\"]]\n      #do.eigen.maps = settings[[\"GenerateEigenMaps\"]]\n      #do.disp.maps = settings[[\"GenerateDispersalMaps\"]]\n      do.diagnostics = settings[[\"RunMatrixDiagnostics\"]] #May not be of interest if transient dynamics from the simulation is the goal.\n      do.simulation = settings[[\"RunSimulation\"]] #May not be of interest if only looking at model diagnostics\n      num.sim = as.num(settings[[\"N.sim.dispersal.table\"]]) #Number of draws for the generation of dispersal tables.  1,000,000 seems like a good number, but will take a while to generate.\n      write.timefile = settings[[\"Write.Timefile\"]] #Options 1 = just total time, 2 = section run times (primarily for optimization)\n\n    #Set write.timefile to default to 0.\n    if (length(write.timefile) == 0){\n        write.timefile = 0\n        }\n\n    #Check if required packages are installed\n    check.packages(out.metrics, include.copula)\n\n        \n    if (write.timefile > 0){\n        ## Set up file for timing results\n        timefile = sprintf(\"%sTimefile.csv\",opath)\n        #if (file.exists(\"timefile\")){\n        #    file.remove(timefile)\n        #    }\n        }\n        \n    #Create a pdf to store graphical outputs\n    in.pdf = sprintf(\"%sPlots_%s.pdf\",opath,Model.Name)\n\n    #set up output path for environmental layers\n    outpath.base = sprintf(\"%s%s/\",run.path,Model.Name)\n    dir.create(outpath.base,showWarnings = F)\n\n    ###  Set up indicator variables ###\n    change.count = 1      #Create a counter to keep track of number of environmental changes\n\n    run.times = c(run.times,gettime()); run.lbl = c(run.lbl,\"MCsetup complete\")\n\n    ## Set up output fields\n    #scale.vec = c(\"landscape\")\n    #scale.cells.lst = list(rep(T,p)) \n    timepoint.vec = c(\"Initial\",\"Final\",\"Change\")\n    nrow.results = length(scale.vec) * length(timepoint.vec)\n\n    #Set up results file\n    #Results = setup.results(ResultsFile,out.metrics,scale.vec)\n    Results = setup.results.v2(ResultsFile,out.metrics,nrow.results) #ResultsFile,out.metrics,scale.vec, timepoint.vec\n\n    #Set Scenario-specific results\n    Results$Scenario[1:nrow.results] = Model.Name \n    Results$Scenario.Number[1:nrow.results] = scn #Remember scn indicates the scenarios used in the loop assigning response trait diversity\n\n    #Loop through scale vec and timepoint vec to setup Results file\n    count = 0\n    for (a.scale in scale.vec){\n        for (a.time in timepoint.vec){\n            count = count + 1\n            Results$Scale[count] = a.scale\n            Results$Timepoint[count] = a.time\n            }\n        }\n\n    #Create a matrix of euclidean distances between all cells in the landscape.  REQUIRES A SQUARE LANDSCAPE (not even rectangular)\n    Distances<-Connectance(p,extent) #Comes out as a matrix\n    distances<-as.vector(Distances) #Converts to a vector with each matrix column being stored sequentially from left to right,\n\n    run.times = c(run.times,gettime()); run.lbl = c(run.lbl,\"Setup prior to scenario-setup loops complete\")\n\n    #Generate or read in species data\n    if (generate.spp == 1){\n        #Generate species\n        SpTraits = gen.spp(sp.instr.file,sp.resp.instr.file,spfile,tot.sp.num)\n\n    }else{\n        #If a file path is specified, read the species in from file\n        if (typeof(spfile) == \"character\"){\n            SpTraits = read.csv(spfile, row.names = 1)\n        #If not, treat the input as an R object.\n        }else{\n            SpTraits = spfile\n            \n            #Check that the first column was read in as row names. If not, assign as row names\n            if (length(SpTraits$sp) != 0){\n                rownames(SpTraits) = SpTraits$sp\n                SpTraits$sp = NULL\n                }           \n            }\n        }\n\n    #Check that the number of species in SpTraits is greater than the number of species required for the model run\n    if (nrow(SpTraits) < tot.sp.num){\n        stop(sprintf('Total species number specified in initial conditions (%s)\\nis greater than the number of species in the species file used by the model (%s)\\nPlease ensure there are sufficient species to accomodate the specified total species number.',tot.sp.num, nrow(SpTraits)))\n        }\n\n    run.times = c(run.times,gettime()); run.lbl = c(run.lbl,\"Species Generated\")\n\n    # Species locations & intial numbers were formerly handled here, now moved to simulation2.r function\n    \n    # Note that <<- assigns to the global variable, and because we are within a function, this is actually necessary.\n      #Note: .Random.seed does not exist by default. It is initialized by setting the seed or using a random number. (seed is set in testing file). So in many model runs, this will just bypass this part of code.\n    if (exists(\".Random.seed\")){\n        .Random.seed <<- load.seed(Model.Name, 2, testing) #Only loads a seed if testing == T\n        }\n            \n    ## Set up environment\n    #Read in environment file (or leave as is, if it is already an R object\n    if (typeof(env.file) == \"character\"){\n        my.env = read.csv(env.file, na.strings = \"NA\")\n    }else{\n        my.env = env.file\n        }\n    \n    #Convert first column to row names (not done with row.names = 1 in read.csv because they were coming in as factors!\n    rownames(my.env) = as.character(my.env$env.lbl)\n    my.env$env.lbl = NULL\n\n    #my.env$env.change.mag = as.character(my.env$env.change.mag) #Convert from factor to character to avoid problems.\n\n    env.c.freq = as.num(my.env[[\"env.change.freq\"]])\n    is.change = change.check(env.c.freq) #Check if any environmental layers will change\n\n    env.lbl = row.names(my.env)\n    landscape.identifiers = as.character(my.env[[\"landscape.identifiers\"]])\n\n    #check if landscape files need to be created based on a copula\n    #check if column is included in settings file\n    if (length(include.copula) > 0){\n        #check if a copula should be included. (> 0 indicates a copula should be done, with number indicating the number of copulas desired\n        if (include.copula > 0){\n            setup.copula(my.env,MaxTime,p,include.copula,run.path,env.lbl,s.lbl)\n            }\n        }\n\n    #If using landscape directory is missing or in the default location, set to default conditions.\n    if (landscape.dir == \"default\"){ landscape.dir = sprintf(\"%s/landscape/\",run.path) }        \n            \n    #create list to contain landscape layers\n    landscape = list()\n\n    if (new.landscape == 1){\n\n        for (y in 1:nrow(my.env)){\n        \n            env.type = as.character(my.env[y,\"env.type\"])\n            env.info = setup.env.info(env.type,my.env,y)\n\n            cond.lyr = as.character(my.env[y,\"cond.lyr\"])\n\n            if (length(cond.lyr) > 1){\n                stop(\"Environmental_layers cond.lyr field needs to contain only a single letter (the landscape identifier)\")\n                }\n\n            #If the landscape.identifiers does not need conditional assignment:\n            if (is.na(cond.lyr)){\n                base.lyr = get.base.env.lyr(env.info,p)\n                act.lyr  = get.env.lyr(base.lyr) #This was separated into two steps to allow for multiple configurations of the same underlying values.  I've broken that functionality in the code rewrite at the moment.\n\n            #Otherwise do conditional assignment\n            }else{\n                cond.vals = as.character(my.env[y,\"cond.vals\"])\n                  cond.vals = list(as.num(strsplit(cond.vals,\";\",fixed = T)[[1]])) #what an awful piece of code.  Outside nesting is it needs to be a list at the end.  Next level is as.num, which requires a non-list input.  Hence the [[1]] after strsplit, because strsplit creates a list!  Splits on \";\"\n                cond.lyr = cv.setup(cond.lyr,landscape,landscape.identifiers) #This re-assigns cond.lyr!  Just so you know.  \n                act.lyr = get.cond.env.lyr(env.info,p,cond.lyr,cond.vals)\n                }\n\n            #append created layer to the landscape\n            landscape = append(landscape,list(act.lyr))\n\n            #Save initial setup conditions if visual debugging is desired\n            if (vdb.data == 1){\n\n                create.new = 1 #Set an indicator for whether or not a new landscape should be created\n                outpath = sprintf(\"%slandscape/\",run.path)\n                dir.create(outpath,recursive = T,showWarnings = F)\n                outfile = sprintf(\"%s%s_%s.csv\",outpath,env.lbl[y],s.lbl)\n                write.env.lyr(act.lyr,change.count,extent,outfile, create.new)\n                paths = outpath\n                }\n            }\n    }else{\n        #new.landscape variable should contain the path to use\n        #lnd.lbl should contain the scenario from the path to use\n\n        #Patch to allow no label option\n        if (lnd.lbl == \"no.lbl\"){\n            lnd.lbl = \"\"\n            }\n        \n        #inpath = sprintf(\"%s/landscape/\",new.landscape)\n\n        if (typeof(landscape.dir) == \"character\"){\n            inpath = landscape.dir\n\n            #Set up landscape from file\n            for (y in 1:nrow(my.env)){\n                lbl = env.lbl[y]\n                act.lyr = read.landscape.lyr(inpath,lbl,lnd.lbl,change.count,p)\n    \n                landscape = append(landscape,list(act.lyr))\n                if (vdb.data == 1){\n                    paths = inpath\n                    }\n                }\n        }else{\n            landscape = landscape.dir\n            }\n        }\n\n    ## Options to speed up the creation of scale.cells.lst\n    if (length(scale.cells.lst) == 1){\n        #If using default of entire landscape, then set to extract results based on entire landscape.\n        if (scale.cells.lst == \"default\"){\n            scale.cells.lst = list(rep(T,p)) #T indicates that the cell values should be included in the calculations\n            }\n            \n        #If only considering one value of an environmental layer\n          #**# This could use improvement/generalization in case someone wanted to look at multiple scales or group multiple values!\n        if (substr(scale.cells.lst,1,6) == \"subset\"){\n            scale.cells.lst = scl.subset(scale.cells.lst, landscape.identifiers, landscape)\n            }                  \n                \n        }\n\n    run.times = c(run.times,gettime()); run.lbl = c(run.lbl,\"Scenario Setup complete\")\n\n    #### Run the simulation for the input parameters #### #disp.pdf,eigen.pdf,\n    Results = Simulation(Model.Name,\n                ResultsFile,\n                vdb.data,timefile,write.timefile,\n                run.times,run.lbl,start.time,\n                run.path, DispPath,outpath.base,num.sim,\n                S,extent,p,landscape,landscape.identifiers,distances,\n                settings, ic,rtd.c,locations.file, landscape.dir,\n                SpTraits,tot.sp.num,\n                my.env,env.c.freq,is.change,\n                change.count,env.lbl,\n                s.lbl,lnd.lbl,\n                competitiontype,microsites,\n                Results,out.metrics,scale.vec,timepoint.vec,scale.cells.lst,\n                resolution,log.trans,\n                MaxTime,\n                invasion,num.invaders,cells.to.invade,repro.proportion,\n                K_g, multi.species.K,\n                edge.type,\n                do.simulation,do.diagnostics, testing) #,do.eigen.maps,do.disp.maps #Removed: species.locs, n.seed,n.juv,n.adult,\n\n    return(Results)\n    } #END OF FUNCTION\n\n#' Initial Conditions File\n#'\n#' This file contains the initial model conditions for one or more scenarios.\n#' Each row in this file corresponds to a scenario.\n#'\n#' @details \\tabular{ll}{\n#' Input \\tab Description \\cr\n#' Scenario \\tab A label for each scenario \\cr\n#' ModelName \\tab A name for each scenario \\cr\n#' Extent \\tab The number of cells on one edge of the landscape (landscapes are square, and contain Extent2 cells). \\cr\n#' Edge.Type \\tab The type of edge to use for the simulation.  Options are TORUS and ABSORBING. \\cr\n#' MaxTime \\tab The number of time steps to include in the model. \\cr\n#' K_g \\tab The adult biomass carrying capacity, in grams.  To get K in terms of abun-dance, divide K_g by the biomass of each species. \\cr\n#' multi.species.K \\tab An variable indicating carrying capacity type.  When set to 0 the carrying capacity is calculated for each species separately, when set to 1, the carry-ing capacity is applied to the biomass of ALL species combined. \\cr\n#' competitiontype \\tab A variable indicating competition type.  When 0, stage 0 individuals do not compete for microsites.  When 1, stage 0 individuals compete with other individuals of the same species for microsites, when 2, stage 0 individuals compete deterministically with all other stage 0 individuals for microsites. When 3, species compete with all other species stochastically (lottery model). \\cr\n#' microsites \\tab Total number of microsites that can be occupied. \\cr\n#' invasion \\tab An indicator for whether or not invasion should take place.  No invasion takes place when 0, otherwise, the variable sets the invasion frequency in number of timesteps (e.g., 1 would have invasion at every time, 2 would have invasion at every 2nd timestep). \\cr\n#' num.invaders \\tab The number of invaders to be added to a cell. \\cr\n#' cells.to.invade \\tab The number of cells in the landscape to be invaded. \\cr\n#' invader.repro.potential \\tab the propagule pressure of the invaders (based on their reproductive potential). \\cr\n#' starting.biomass \\tab The starting biomass to be initialized in each cell.  Will be divided evenly among non-dispersing life stages.  Only used/needed if initial.n == 2 in \\link[spatialdemography]{settings.file}.\\cr\n#' num.adults \\tab The number of adults to be initialized in each cell.  Only applies when automatically assigning species to the landscape. \\cr\n#' Tot.sp.rich \\tab The number of species to include in the regional species pool.  Species in the regional species pool can be assigned to the landscape, and are available to invade the landscape.  When generating species, this will set the number of species to create; when reading in species from file, this will serve as a check that the appropriate number is generated. this species richness will reflect the regional species pool, and can be used for assignment to the landscape or for subsequent invasion. \\cr\n#' Land.sp.rich \\tab The number of species initially in the landscape.  Only relevant when generating species automatically \\cr\n#' Loc.sp.rich \\tab The number of species assigned per cell. (currently the same number for automatic generation). \\cr\n#' Tot.rtd \\tab Total species pool response trait diversity.  This includes dispersal traits as well as response traits from the species responses file. \\cr\n#' Land.rtd \\tab Total landscape response trait diversity. \\cr\n#' Loc.rtd \\tab Total local response trait diversity. \\cr\n#' }\n#' @name initial.conditions.file\nNULL\n\n#' Settings File\n#'\n#' This file contains settings for one or more model scenairios.  Each row\n#' in this file corresponds to a scenario\n#'\n#' @details \\tabular{ll}{\n#' Input \\tab Description \\cr\n#' Scenario \\tab A label for each scenario.  Needs to correspond & be in the same order as the Scenario input in the initial conditions file. \\cr\n#' GenerateVisualDebuggerData \\tab An indicator variable. When 0, additional diagnostics are not produced.  When 1, additional diagnostics are produced.\\cr\n#' GenerateNewSpecies \\tab When 1, new species are generated based on the Species Instructions File \\link[spatialdemography]{sp.instr.file} and the Species Response Instructions File \\link[spatialdemography]{sp.resp.instr.file}. Otherwise, a pointer should be given to indicate which existing Species file (\\link[spatialdemography]{sp.file}) to use (the pointer is a short piece of code in the Species file name that follows species_file_ and precedes any ending (e.g., date).\\cr\n#' GenerateNewLandscape \\tab When 1, new landscape files are generated based on the Environmental Layers File (\\link[spatialdemography]{env.file}).\\cr\n#' ignore.rtd \\tab (optional) An indicator variable for whether response trait diversity should be taken into account when assigning species.  If 1, specified response trait diversity levels will be met (or an error will be given if they cannot be met), if 0, the model will proceed without respect to those inputs. Not applicable when species locations are read in from file. \\cr\n#' initial.n \\tab (optional, if column is absent, defaults to a value of 1.) An indicator for how initial species numbers should be assigned.  If absent or 1, 10 times as many juveniles and 100 times as many seeds will be produced (relative to adult numbers).  If 2, a starting biomass is specified in the \\link[spatialdemography]{initial.conditions.file} and this biomass is divided evenly among all three life stages.  Each life stage starts with a number of individuals equal to 1/3 starting biomass divided by the biomass of an individual (floor division). \\cr\n#' loc.extraction \\tab (optional) Indicates how extraction from file should proceed. Extraction types are: 1. Read in all life stages from file. 2. Read in locations (presence) from file, but set up abundances based on settings in initial.n. 3. Read in adult locations from file, and set up juveniles and seeds based on settings in initial.n. \\cr\n#' timestep.extraction \\tab The time step to be extracted from file \\cr\n#' include.copula \\tab (optional) An indicator for whether generation via a copula is desired.  Number should indicate the number of different copulas desired. \\cr\n#' N.sim.dispersal.table \\tab The number of random draws to be used for obtaining simu-lated dispersal probabilities.\\cr\n#' RunSimulation \\tab When 1, this indicates that the simulation portion of the model should be run, otherwise the simulation is not con-ducted.\\cr\n#' RunMatrixDiagnostics \\tab When 1, this indicates that additional matrix diagnostics should be computed and written to file, otherwise these are not computed.\\cr\n#' Write.Timefile \\tab When 0 or absent, no timing is done. When 1, the total scenario time is written to file. When 2, total scenario time and run time details are output to file.\\cr\n#' }\n#' @name settings.file\nNULL\n\n#' Environmental Layers File\n#'\n#' Environmental settings.  There should be a row for every environmental layer\n#' included in the model.  In the case of pre-generated, unchanging landscapes,\n#' only the env.lbl, landscape.identifiers, and env.change.freq fields are important.\n#'\n#' @details \\tabular{lll}{\n#' Input \\tab Example \\tab Description\\cr\n#' env.lbl \\tab mowing \\tab A label for the environmental layer. \\cr\n#' landscape.identifiers \\tab M \\tab A single letter identifier for each environmental layer.\\cr\n#' env.type \\tab cover \\tab A code for the type of environmental layer. See \\link[spatialdemography]{env.type} for more details.\\cr\n#' cover.levels \\tab 0.75;0.25 \\tab Cover levels for each value of the environmental variable (separated by a semi-colon). Only applicable if env.type is set to cover. See \\link[spatialdemography]{env.type} for more details. \\cr\n#' param1 \\tab 0;1 \\tab A parameter guiding the construction of the environ-mental layer. See \\link[spatialdemography]{env.type} for more details.\\cr\n#' param2 \\tab NA \\tab A second parameter guiding the construction of the en-vironmental layer. See \\link[spatialdemography]{env.type} for more details.\\cr\n#' cond.var \\tab landcover \\tab If NA, the current landscape element will be produced independently.  Otherwise, this generation of this environmental layer will depend on the environmental layer specified here. In theory multiple environmental layers could be specified.  In practice, this functionality is not fully supported.\\cr\n#' cond.vals \\tab 1 \\tab Indicates which values in the other layer should be con-sidered potentially suitable (this layer will be assigned values of 0 for all other values of the conditioning layer). If cond.var is NA, this should also be NA.\\cr\n#' env.change.freq \\tab 10 \\tab Indicates how often the environment should change.  A 0 turns off environmental change. There is currently no way to get an irregular change interval, or to stop environmental change mid-scenario based on this parameter.\\cr\n#' env.change.type \\tab swap \\tab Indicates what type of environmental change should take place. See \\link[spatialdemography]{env.change.type} for more details. \\cr\n#' env.change.mag \\tab NA \\tab Describes the magnitude of the environmental change. See \\link[spatialdemography]{env.change.type} for more details.\\cr\n#' }\n#' @name env.file\nNULL\n\n#' Species Instructions File\n#'\n#' Optional input file giving instructions for generation of species base vital rates.\n#' Each vital rate should be a row entry.  For each vital rate, three columns\n#' need to be filled in: Function, parameter1, and parameter2 see \\link[spatialdemography]{distribution.functions}\n#' for more information. Either this file and the \\link[spatialdemography]{sp.resp.instr.file}\n#' OR the \\link[spatialdemography]{sp.file} are required.\n#'\n#' @details \\tabular{ll}{\n#' Input \\tab Description \\cr\n#' p01 \\tab Transition rate from stage 0 to stage 1.\\cr\n#' p02 \\tab Transition rate from stage 0 to stage 2.\\cr\n#' p11 \\tab Survival rate of stage 1 (proportion of stage 1 individuals that remains in stage 1).\\cr\n#' p12 \\tab Transition rate from stage 1 to stage 2.\\cr\n#' p22 \\tab Survival rate of stage 2 (proportion of stage 2 individuals that remains in stage 2).\\cr\n#' p23 \\tab Transition rate from stage 2 to stage 3.\\cr\n#' p30 \\tab Number of stage 0 individuals produced by stage 3.\\cr\n#' p32 \\tab Number of stage 2 individuals produced by stage 3.\\cr\n#' p33 \\tab Survival rate of stage 3 (proportion of stage 3 individuals that remain in stage 3).\\cr\n#' biomass.adult \\tab The species' adult biomass (g).\\cr\n#' biomass.juv \\tab The species juvenile biomass (g), only needed if assigning initial numbers by biomass. \\cr\n#' biomass.seed \\tab The species' seed mass (g), only needed if assigning initial numbers by biomass. \\cr\n#' dispersalfunction \\tab A number indicating which dispersal function to use.  Log-normal is indi-cated by 1.\\cr\n#' disppar1 \\tab The first input parameter for the dispersal function.  For log-normal, this is the mean dispersal distance, in cells (not log transformed).\\cr\n#' disppar2 \\tab The second input parameter for the dispersal function.  For log-normal, this is the dispersal standard deviation in cells (log-transformed).\\cr\n#' }\n#' @name sp.instr.file\nNULL\n\n#' Species Response Traits Instructions File\n#'\n#' Input file giving instructions for generation of species response traits.\n#' Each row should corre-spond to a response trait.  Either this file and the\\\n#' Species Instructions File \\link[spatialdemography]{sp.instr.file} OR the\n#' Species File \\link[spatialdemography]{sp.file} are required.\n#'\n#' @details \\tabular{lll}{\n#' Label \\tab L.p23 \\tab This field consists of two parts, separated by a period.  The first part is the landscape.identifier for the landscape layer of interest, the second part is the vital rate that should be modified.  Duplicate labels are allowed that code for dif-ferent response traits. \\cr\n#' DistributionFunction \\tab 10 \\tab A numeric indicator that codes for a function for how the response trait should be distributed among species. See \\link[spatialdemography]{distribution.functions} for more details. \\cr\n#' distfunpar1 \\tab 0.5 \\tab The first parameter for the distribution function. See \\link[spatialdemography]{distribution.functions} for more details. \\cr\n#' distfunpar2 \\tab 2.5 \\tab The second parameter for the distribution function. See \\link[spatialdemography]{distribution.functions} for more details. \\cr\n#' ResponseFunction \\tab 100 \\tab A numeric indicator that codes for how the response trait will function for each species. See \\link[spatialdemography]{response.functions} for more details. \\cr\n#' respfunpar1 \\tab 1 \\tab The first parameter for the response function. See \\link[spatialdemography]{response.functions} for more details.\\cr\n#' respfunpar2 \\tab 0.64 \\tab The second parameter for the response function. See \\link[spatialdemography]{response.functions} for more details.\\cr\n#' }\n#' @name sp.resp.instr.file\nNULL\n\n#' Species File\n#'\n#' Input file giving the vital rates and response traits for each species.\n#' Either this file OR both the Species Instructions File \\link[spatialdemography]{sp.instr.file}\n#' and the Species Response Instructions file \\link[spatialdemography]{sp.resp.instr.file} are required.\n#' \n#' @details \\tabular{ll}{\n#' Input \\tab Description \\cr\n#' sp \\tab A numeric indicator for species \\cr\n#' p01 \\tab Transition rate from stage 0 to stage 1.\\cr\n#' p02 \\tab Transition rate from stage 0 to stage 2.\\cr\n#' p11 \\tab Survival rate of stage 1 (proportion of stage 1 individuals that remains in stage 1).\\cr\n#' p12 \\tab Transition rate from stage 1 to stage 2.\\cr\n#' p22 \\tab Survival rate of stage 2 (proportion of stage 2 individuals that remains in stage 2).\\cr\n#' p23 \\tab Transition rate from stage 2 to stage 3.\\cr\n#' p30 \\tab Number of stage 0 individuals produced by stage 3.\\cr\n#' p32 \\tab Number of stage 2 individuals produced by stage 3.\\cr\n#' p33 \\tab Survival rate of stage 3 (proportion of stage 3 individuals that remain in stage 3).\\cr\n#' biomass.adult \\tab The species' adult biomass (g).\\cr\n#' biomass.juv \\tab The species juvenile biomass (g), only needed if assigning initial numbers by biomass. \\cr\n#' biomass.seed \\tab The species' seed mass (g), only needed if assigning initial numbers by biomass. \\cr\n#' dispersalfunction \\tab A number indicating which dispersal function to use.  Log-normal is indi-cated by 1.\\cr\n#' disppar1 \\tab The first input parameter for the dispersal function.  For log-normal, this is the mean dispersal distance, in cells (not log transformed).\\cr\n#' disppar2 \\tab The second input parameter for the dispersal function.  For log-normal, this is the dispersal standard deviation in cells (log-transformed).\\cr\n#' <Response Traits> \\tab Zero or more response traits describing how the species will respond to environmental layers.  Each entry is delimited by \";\", and has four components: the \"optimal\" value, a code for the function for how the vital rate will change relative to the optimal value, and two parameters for the function.  \n#' }\n#' @name sp.file\n#' @aliases SpTraits spfile species.file dispersal\nNULL\n\n#' Landscape Files\n#'\n#' The landscape files are optional, and only are needed if a specific landscape\n#' configuration is desired.  In this case, there should be a file for each\n#' environmental layer in the landscape (with each file name matching an env.lbl\n#' field  in the Environmental_layers file plus an _0.csv, e.g., for landcover,\n#' the file name would be landcover_0.csv).  Within each file the values for the\n#' environmental layer should be present in comma-separated format, with the\n#' number of rows equaling the number of columns equaling the landscape extent\n#' specified in the Initial_conditions file.  There should be no column or row\n#' headers.\n#'\n#' During the model run, if there is environmental change, new landscapes can be\n#' generated.  These will have a number appended after the file name, and the numbers\n#' will be linked to correpsonding timesteps in the \\link[spatialdemography]{change.lookup}.\n#'\n#' @name landscape.files\nNULL\n\n\n#' Initial Species Locations File\n#'\n#' An Initial Species Locations File is also optional, and should only be\n#' included if particular species starting locations are desired.\n#' There are two formats for this file. In the old format, there should be one\n#' row for each cell in the landscape.  In each row, the species that should be\n#' present in the corresponding cell should be listed, separated by commas\n#' All species will be initialized with the same number of adults as specified\n#' in the num.adults field in the Initial Conditions File\n#' \\link[spatialdemography]{initial.conditions.file}). The file should not include header information.\n#' In the new format, the file should be in the format of the SpeciesData.csv\n#' file generated by the model. The header should include (in this order):\n#' LifeStage, Species, TimeStep, Cells (one column for each cell in the landscape)\n#' Only locations from a single (user-specified) timestep will be extracted.\n#'\n#' @name locations.file\nNULL\n\n#' Species Parameters File\n#'\n#' The file contains three headings: Trait, Min, and Max.  Trait lists traits,\n#' while min and max give minimum and maximum values to sample from.  When a \n#' fixed value is desired, min and max should be equal.\n#' See details for description of traits that should be included.\n#'\n#' @details \\itemize{\n#' \\item seed.disp.ratio The proportion of seeds dispersing out of the cell. %% This parameter is misnamed, should be proportion dispersing.\n#' \\item adult.longevity Adult survival %% This parameter is also misnamed.\n#' \\item g Proportion of reproduction allocated to clonal reproduction\n#' \\item w Probability of a seed germinating\n#' \\item biomass.seed Biomass of a seed\n#' \\item biomass.adult Biomass of an adult\n#' \\item biomass.clone Biomass of a clone\n#' }\n#'\n#' @name sp.param.file\nNULL\n\n#' Environmental Parameters File\n#'\n#' The file contains parameter entries and minimum and maximum values for each parameter.\n#' The minimum and maximum values are used for latin hypercube sampling.  If a \n#' constant value is desired, minimum value should equal maximum value\n#' while min and max give minimum and maximum values to sample from.\n#' See details for a description of parameters to include.\n#'\n#' @details \\itemize{\n#' \\item k2 A parameter used in the Weibull function describing the relationship between adult longevity and allocation to reproduction\n#' %% Jakob often referred to this as the \"Cost of Iteroparity\".\n#' \\item seed.mortality Seed mortality\n#' \\item Ss.mean Mean stochastic seedling survival (fixed across all species).  Stochastic seedling survival is determined by a beta distribution (but this is not the Alpha parameter!)\n#' \\item Ss.var Variation in stochastic seedling survival (fixed across all species)\n#' \\item fertility.mean Mean fertility rate (fixed across all species).  Fertility is determined by a log-normal distribution\n#' \\item fertility.var Variation (sd) in fertility rate (fixed across all species)\n#' \\item Ss.fert.cor The correlation between variation in fertility and stochastic seedling survival.\n#' }\n#'\n#' @name env.param.file\nNULL\n\n#' env.type input\n#'\n#' env.type determines how each landscape element will be set up.\n#'\n#' @details Any of the distribution functions (see \\link[spatialdemography]{distribution.functions} will work here. Additionally, the following options are available:\n#' \\itemize{\n#' \\item cover specifying cover will set up the element based on percent cover, with required parameters being specified in the cover.levels and param1 fields. The field cover.levels specifies the cover levels to be generated, each separated by a semicolon (no semicolon is needed if only one cover class is present).  This should be the proportion of cells in each cover type (e.g., 1 would give one cover type with 100% cover, 0.5;0.5 would give two cover types each with 50% cover, and 0.5;0.25;0.25 would give 3 cover types the first with 50% cover, the second with 25% cover, and the third with 25% cover.  The first number assigned is determined by param1, and numbers follow sequentially and increasingly from there.  (e.g., if param1 = 1, then the third example above would generate cover levels of 1,2,3).  The param2 field should be set to NA. \n#' \\item rnorm will set the landscape element up based on values drawn from a normal distribution where the mean is given by the value of param1 and the standard deviation by the value of param2.  The cover.levels field should be set to NA.\n#' }\n#' @name env.type\nNULL\n\n#DD# A few more words in here may be desirable\n#' env.change.type & env.change.mag inputs\n#'\n#' env.change type specifies how the environment changes, while env.change.mag determines the magnitude of the change.\n#' The field env.change.mag often contains multiple pieces of information.  Main components are separated by a semi-colon, sub-components are separated by a colon.\n#'\n#' @details\n#' \\itemize{ %% Begin first list\n#' \\item For Non-conditional Landscape Elements (i.e. environmental layers where cond.var is set to NA) \\cr\n#' \\itemize{ %% Begin sub-list for non-conditional landscape elements\n#' \\item swap: this will randomize the locations of existing values in the landscape element.  env.change.mag should be 0 or NA for this env.change.type. \n#' \\item markov: this will change each value according to a Markov process, based on traisition probabilities given in env.change.mag\n#' \\itemize{ %% Begin third sub-list (for markov option)\n#' \\item env.change.mag needs to have transition probabilities for each possible value in the environmental layer\n#' \\item The possible values are given first, followed by transitions for first layer value (to first, to second, etc), then transitions for the second layer value (to first, to second, etc)\n#' \\item Transitions should be cumulative probabilities\n#' \\item For example: 0:1;0.681:1:0.275:1\n#' \\itemize{ %% Begin forth sub-list: example options\n#' \\item 0:1 correspond to two possible values in the landscape, 0 and 1.\n#' \\item 0.681 corresponds to the probability of going from 0 to 0.  The 1 indicates the cumulative transition probability (and will always be 1 for the last value).  The probability of transitioning from 0 to 1 is 0.319 in this example (1 - 0.681, the preceding value.  The probability of transitioning from 1 to 0 is 0.275, and the probability of transitioning from 1 to 1 is 0.725 (1 - 0.275).\n#' } %% End forth sublist\n#' } %% For markov option (third sublist)\n#' \\item markov.changing.transitions: The same as markov above, except with an extra part of env.change.mag describing how the transition rates themselves change with time. \n#' \\itemize{ %% Begin fifth sublist\n#' \\item For example 0:1;0.681:1:0.275:1;-0.05:0:-0.025:0 \n#' \\item The last section -0.05:0:-0.025:0 corresponds to:\n#' \\item -0.05 this decreases the probability of transitioning from 0 to 0.\n#' \\item 0 This leaves the end point at 1.  With the decrease in transition probability for 0 to 0, this results in an increase in transition probability of 0 to 1.\n#' \\item -0.025 leads to a decrease in the transition probability of going from 1 to 0\n#' \\item 0 Keeps the cumulative probability distribution at 1, and consequently will lead to increasing transition probabilities from 1 to 1.\n#' } %% end fifth sublist (markov.changing.transitions descriptions)\n#' \\item cover.change.and.swap: (needs testing) this changes the initial cover levels, then reassigns cover values to the landscape randomly based on the new cover levels.  In this case, env.change.mag corresponds to the incremental changes to overall cover levels.  These changes must balance one another.  For example, if initial cover levels were 0.5,0.25,0.25, and the value of env.change.mag was 0.25;-0.125;-0.125, at each change step, the overall cover level after the first change would be 0.75,0.125,0.125.  Note that changes that result in cover levels that cannot be assigned to the landscape (e.g., in a landscape of 4 cells, you could not have probabilities other than 0,.25,.5,.75, and 1). Also note that a change that would reduce a cover level below 0 or above 1 will result in a warning and no environmental change. \n#' \\item rnorm.prob: (needs testing) each value of a landscape element will change with a specified probability.  If it changes, the mean will be adjusted by a set value, and a new value will be drawn from a random normal distribution with the new mean and a specified standard deviation.  In this case, env.change.mag needs to contain: \n#' \\itemize{ %% Begin sixth sublist\n#' \\item 1.\tthe probability the cell will change\n#' \\item 2.\tthe change in mean for the new value\n#' \\item 3.\tthe overall standard deviation for drawing a new value\n#' \\item 4. Example: 0.5;0.25;1\n#' \\item 5. The first number gives the probability a cell value will change.  R will draw a random number, if the random number is less than or equal to this value, the cell will change.\n#' The second number is added to the current cell value (e.g., if the cell value had been 20,  the new mean would be 20.25.  A new value for the cell would then be drawn from a normal distribution with a mean of 20.25 and a standard deviation of 1.\n#' } %% end sixth sublist (rnorm prob options)\n#' \\item f.\tlandscape.wide.change: A change is applied to the entire landscape, but the difference in values between cells remains the same.  In this case, env.change.mag contains four elements:\n#' \\itemize{ %% begin 7th list, landscape.wide.change options\n#' \\item i.\tthe overall mean for the landscape.  This will be changed each time there is an environmental change in this layer\n#' \\item ii.\tthe overall standard deviation for the landscape.  This will change each time there is an environmental change\n#' \\item iii.\tThe change in overall mean\n#' \\item iv.\tThe change in overall standard deviation\n#' \\item Explanation: First, the overall mean and standard deviation in env.change.mag are updated based on elements iii. and iv.  Second, a change is drawn from a normal distribution the overall standard deviation (ii) (with a mean of 0).  Next, residuals for each cell are calculated by subtracting each cells value from the old landscape mean.  Finally, new cell values are created by taking the overall landscape mean, adding in the cell specific residuals, and adding the random change element.\n#' } %% End seventh sublist\n#' \\item logn Change according to a log-normal distribution. Mean and variance as for rnorm.prob.\n#' \\item beta Change according to a beta distribution value with mean and variance specified in c.mag (mean != alpha)\n#' \\item fx Change using one of the distribution functions. See \\link[spatialdemography]{distribution.functions} for more details.\n#' \\item from.file Change is read in from the landscape file based on the new change.count \n#' } %% End second sublist, for non-conditional landscape elements\n#' \\item For conditional landscape elements (cond.var is not set to NA):\n#' \\itemize{ %% begin eight sublist - conditional landscape elements\n#' \\item swap: (only valid for env.type == \"cover\", will not work for env.type == \"rnorm\"):  this will randomize the locations of existing values in the landscape elements, with the condition that values cannot be assigned to cells determined to be inappropriate based on another landscape element.  E.g. this can prevent mowing from occurring in forests, even when patterns of mowing or of forests changes (however if the proportion of the conditioning layer (e.g., forest) changes, this will not work properly (because there will be more or fewer suitable habitat patches than there are values to assign).  It only works if the conditional layer does not change, or changes via swap.  env.change.mag should be set to 0 or to NA for this setting. \n#' \\item markov: b.\tmarkov: See above under non-conditional landscape elements.  The markov transitions are only applied to cells that are suitable based on the other habitat type, non-suitable cells are automatically zero.\n#' \\item markov.changing.transitions: c.\tmarkov.changing.transition: See above under non-conditional landscape elements. The markov transitions are only applied to cells that are suitable based on the other habitat type, non-suitable cells are automatically zero.\n#' \\item from.file Change is read in from the landscape file based on the new change.count \n#' } %% end eight sublist (conditional landscape elements) \n#' } %% End overall list\n#' @name env.change.type\n#' @aliases env.change.mag\nNULL\n\n#DD# Update this documentation - I think it is out of date\n#' Distribution and Response Functions\n#'\n#' Distribution functions govern the creation (e.g., of species, of dispersal\n#' distances, or environmental layer values), while response functions define\n#' how species respond to environmental conditions.  This is accomplished\n#' through creation of a modifier (constrained to be between 0 and 1)\n#'\n#' @details Distribution functions are given in the following table:\n#' \\tabular{lll}{\n#' Function Code \\tab Function \\tab Description \\cr\n#' 1 \\tab log-normal \\tab Draw values from a log-normal distribution; par1 specifies the mean and par2 specifies the SD (mean & SD in log-space, but see note below) \\cr\n#' 2 \\tab normal \\tab Draw values from a normal distribution; par1 specifies the mean and par2 specifies the SD \\cr\n#' 3 \\tab constant \\tab Only enter a constant value.  Only par1 is used. \\cr\n#' 4 \\tab uniform \\tab Draw values from a uniform distribution.  The lower bound is given by par1 and the upper by par2 \\cr\n#' 5 \\tab uniform, rounded to nearest integer \\tab Draw values from a uniform distribution, but round to the nearest integer.  The lower bound is given by par1 and the upper by par2.  Both bounds must be integers. \\cr\n#' \"cover\" \\tab cover \\tab Values are assigned relative to proporition of cover, with par1 specifying cover proportions. Only can be used for environmental layer setup. \\cr\n#' }\n#' Response functions are given here:\n#' \\tabular{lll}{\n#' Function Code \\tab Function \\tab Description \\cr\n#' 101 \\tab matching \\tab if the value of an environmental layer in a given cell matches the species' target value, then the appropriate vital rate is multiplied by param1.  If the value does not match, then the appropriate vital rate is multiplied by param2. \\cr\n#' 102 \\tab quadratic, decreasing \\tab -par1 * (env.val - target.val)^2 + 1 Where env.val is the value of the environmental layer in a given cell, and target.val is the species' target value. \\cr\n#' 103 \\tab environmental \\tab Take modifier value directly from cell's environmental layer\n#' Note that these modifiers are not constrained to be between 0 and 1, and choosing\n#' biologically plausible/realistic/possible values is left to the investigator \\cr\n#' 104 \\tab seed fertility \\tab Get seed number based on the approach in the Stochastic Plants paper\n#' opt.val = value specified as base vr for clone production (allows calculation of the modifier)\n#' par1 = biomass.adult:biomass.seed:biomass.clone\n#' par2 = relative.allocation.reproduction (a):ratio.sex.allocation (g)\n#' q = biomass.adult * a * fertility   #fertility is given by the environmental layer and is in grams\n#' num.seeds = q * (1 - g) / biomass.seeds (For funct == 105, num.clones = q * g / biomass.clones)\n#' modifier = num.seeds / opt.val #This will later be multiplied by opt.val, allowing that part to cancel out leaving the new seed number.        \n#' \\cr\n#' 105 \\tab clone fertility \\tab Get clone number based on the approach in the Stochastic Plants paper.  See details in function 104.  \\cr\n#' }\n#' @name DFRF\n#' @aliases distribution.functions response.functions\nNULL\n\n#' Results Outputs\n#'\n#' File outputs generated by the model (including some optional outputs\n#' by requesting visual debugger data or matrix diagnostics.  \n#'\n#' @details Table summarizes how many files are produced\n#' per model run (MR), scenario (SC), timestep (TS), cell (CL), species (SP),\n#' environmental layer (EL), environmental conditions (EC). \\cr\n#' The file  production is multiplicative (e.g., 100 timesteps x 2 species = 200 files) \n#' \\tabular{lll}{\n#' File type \\tab Number of Files created \\tab Link to File description \\cr\n#' Seeds in landscape \\tab MR, SC, TS, SP \\tab \\link[spatialdemography]{stage.abundances} \\cr\n#' Juveniles in landscape \\tab  MR, SC, TS, SP \\tab \\link[spatialdemography]{stage.abundances} \\cr\n#' Adults in landscape \\tab  MR, SC, TS, SP \\tab \\link[spatialdemography]{stage.abundances} \\cr\n#' Local transition matrices \\tab MR, SC, CL, SP, EC \\tab \\link[spatialdemography]{local.transition.matrices} \\cr\n#' Landscape-wide matrices \\tab  MR, SC, SP, EC \\tab \\link[spatialdemography]{landscape.wide.matrix} \\cr \n#' Local matrix summary info \\tab MR, SC, SP, EC \\tab \\link[spatialdemography]{local.matrix.summary.info} \\cr\n#' Overall matrix diagnostics \\tab MR, SC, EC \\tab \\link[spatialdemography]{overall.matrix.diagnostics} \\cr\n#' Landscape files \\tab MR*, SC*, EL, EC; *can be reused \\tab \\link[spatialdemography]{landscape.files} \\cr\n#' Change lookup \\tab MR, SC \\tab \\link[spatialdemography]{change.lookup} \\cr\n#' Cell occupancy \\tab MR, SC \\tab \\link[spatialdemography]{cell.occupancy} \\cr\n#' Species statistics seeds \\tab MR, SC \\tab \\link[spatialdemography]{species.statistics} \\cr\n#' Species statistics juveniles \\tab MR, SC \\tab \\link[spatialdemography]{species.statistics} \\cr\n#' Species statistics adults \\tab MR, SC \\tab \\link[spatialdemography]{species.statistics} \\cr\n#' Scenario Timing \\tab MR, SC \\tab \\link[spatialdemography]{scenario.timing} \\cr\n#' Model Results \\tab MR \\tab \\link[spatialdemography]{results.file} \\cr\n#' }\n#' @name Results.Outputs\nNULL\n\n#' Stage Abundances\n#'\n#' These files are in a folder labeled *_matrices, where * corresponds to the \n#' lifestage of interest.  This gives the abundance of the lifestage of interest\n#' in every cell of the landscape.  There is one file per species per timestep,\n#' for each scenario. \\cr\n#' File names are Stage_species_timestep.csv\n#'\n#' @name stage.abundances\n#' @aliases seed.abundances juvenile.abundances adult.abundances\nNULL\n\n#' Local Transition Matrices\n#'\n#' These files give the local transition matrices for each species for each cell\n#' in the landscape for each set of environmental conditions.  See Appendix S1\n#' for more details.\n#'\n#' @name local.transition.matrices\nNULL\n\n#' Landscape-wide Matrix\n#'\n#' This provides the landscape-wide transition matrix.\n#' See Appendix S1 for more details.\n#'\n#' @name landscape.wide.matrix\nNULL\n\n#' Local Matrix Summary Info\n#'\n#' Found in Diagnostics/Sp*/ folder, where * corresponds to the species of interest.\n#' For each cell, this file gives the Dominant eigenvalue from the local transition matrix,\n#' The per capita seeds the cell exports, and the per capita seeds the cell imports.\n#' Per capita imports is misleading, as different cells that contribute to this cell\n#' may have different population sizes, and this is a sum across all cells.\n#' Finally, the proportion of the seeds produced that are exported is given.\n#' There is a local matrix summary info for each species, and for each environmental\n#' change.\n#'\n#' @name local.matrix.summary.info\nNULL\n\n#' Overall Matrix Diagnostics\n#'\n#' This summary file provides the landscape-wide growth rate, irreducibility,\n#' ergodicity, maximum, median, and minimum local growth rates, maximum, minimum,\n#' and median seed imports and exports, and the proportion of seeds dispersing.\n#' (the model says max, min and median, but as dispersal is a species trait, it\n#' the proportion dispersing will not change). \\cr\n#' Each row corresponds to a species.\n#'\n#' @name overall.matrix.diagnostics\nNULL\n\n#' Change Lookup\n#'\n#' One lookup file is created, which tells spatialdemography which landscape files \n#' correspond to which timesteps.\n#'\n#' @name change.lookup\nNULL\n\n#' Cell Occupancy\n#'\n#' The number of cells occupied at each time step.\n#' Rows correspond to time steps, while columns indicate species.\n#'\n#' @name cell.occupancy\nNULL\n\n#' Species Statistics\n#'\n#' Summary statistics by time step for each species in the landscape.\n#' Time steps correspond to rows, and species correspond to columns (this is\n#' somewhat non-intuitive and confusing in the file)\n#'\n#' @name species.statistics\nNULL\n\n#' Scenario Timing\n#'\n#' The Scenario timing file gives the time and overall elapsed time for \n#' different model processes, as well as an overall model time.  The purpose of\n#' this file is to know how long a model run took, and to identify rate-limiting\n#' processes that can either be reimplemented to be faster in R, or implemented\n#' in C or C++\n#'\n#' @name scenario.timing\nNULL\n\n#' Results File\n#'\n#' The results file contains a row for each scenario, with the scenario, scenario\n#' number, and the last timestep completed (in case the model crashes). \\cr\n#' The model provides initial, final, and change for species richness Sp.Rich,\n#' (multiplicative) beta diversity (Beta.Div), biomass.adult, functional trait diversity\n#' (FTD.UTC, calculated with the unscaled multivariate richness index), and response trait\n#' diversity (also calculated with the unscaled multivariate richness index.\n#' (at present these are fixed to these specific options and are calculated at\n#' the landscape scale. In future versions these may be user-specified. \\cr\n#'\n#' @name results.file\n#' @aliases model.results\nNULL\n\n#' Calculated Metrics\n#'\n#' These are metrics that can be calculated by spatialdemogrphay as the primary\n#' model results.\n#' %% These options are not yet available:\n#' %% \"FTD.PGFD\" \\tab Functional trait diversity calculated with Petchey & Gaston's FD \\cr\n#' %% \"RTD.PGFD\" \\tab Response trait diversity calculated with Petchey & Gaston's FD\\cr\n#'\n#' @details Options are given in the below table:\n#' \\tabular{ll}{\n#' \"Sp.Rich\" \\tab Species Richness \\cr\n#' \"Beta.Div\" \\tab Multiplicative Beta Diversity \\cr\n#' \"Biomass\" \\tab Total Biomass \\cr\n#' \"FTD.UTC\" \\tab Functional trait richness calculated with Unique Trait Combinations \\cr\n#' \"RTD.UTC\" \\tab Response trait richness calculated with Unique Trait Combinations \\cr\n#' \"FTD.FRIC\" \\tab Functional trait richness calculated with the convex hull\\cr\n#' \"RTD.FRIC\" \\tab Response trait richness calculated with the convex hull\\cr\n#' }\n#'\n#' @name out.metrics\nNULL\n\n#' Setting the Scale of output results\n#'\n#' SpatialDemography has the ability to examine model results at multiple spatial scales.\n#' The default settings scale.vec = c(\"landscape\") and scale.cells.lst = \"default\"\n#' examine model results at the scale of the entire landscape. The entries in\n#' scale.vec are just labels, they do not actually serve any functional purpose.\n#' scale.cells.lst actually determines which cells are evaluated, in the default\n#' condition, a vector of all cells is included. This vector can just select \n#' specific cells (i.e. a value of 1 for cells to be evaluated and 0 for cells\n#' not to be evaluated. In addition, a new option has been added where only\n#' cells of a particular environmental layer value can be evaluated. In this \n#' case, scale.cells.lst should be set to \"subset;X;Y\" where X stands for a landscape\n#' identifier, and Y stands for the value of that environmental layer to be considered.\n#' For example, \"subset;L;1\" would look for the environmental layer with landscape.identifier of L\n#' (typically landcover or land use for my simulations), and would only calculate\n#' output results for a value of 1 (typically grassland cells in my simulations).\n#' Unfortunately this cannot be used with evaluations of multiple scales.\n#' But that limitation may change in the future.\n#'\n#' @name scale.vec\n#' @aliases scale.cells.lst\nNULL",
    "created" : 1427810527673.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "871733586",
    "id" : "8538A20F",
    "lastKnownWriteTime" : 1427735996,
    "path" : "C:/docs/beplants/Scripts/spatialdemography/R/spatialdemography.r",
    "project_path" : "R/spatialdemography.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}