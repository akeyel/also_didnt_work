{
    "contents" : "# CODE FOR TESTING THAT THE MODEL IS FUNCTIONING PROPERLY IN TESTABLE RESPECTS\n\n#Main body of code borrowed from MC_model.r\n\n#**# Think about converting the test code to vignettes?\n\n#**# REVELATION: ../ refers to the parent directory with relative paths.  THIS IS COOL!  And probably utterly obvious to anyone who is actually a programmer...\n\n#Tests should test all options, but not necessarily all interactions of options (because that would be a lot of testing)\n\n#**# Figure out how to remove path dependency (will be easier for non-development mode code)\n#**# Need to add clean up code that deletes the generated files\n#**# Would file deletion be easier if the base code were all living somewhere else, and got copied into the appropriate folder?)\n  #**# make that happen.\n\n#TestRun1:\n  # Test species generation\n  # Test landscape generation\n  # Test conditional landscape generation\n  # Test initial location assignment (numeric)\n  # Test with species invasion\n  # Test with environmental change\n  # Edge type = TORUS\n  # 10 species at regional\n  # 5 species in landscape\n  # 1 species local\n  # competition type = 0\n  # multispecies.K = 1\n\n#TestRun2\n  # Test reading in species from file\n  # Test read in landscape from file\n  # Test initial location assignment (from file)\n  # No species invasion\n  # Test with environmental change\n  #Edge type = TORUS\n  # 2 species regional, landscape, and local\n  # competition.type = 1\n  # multispecies.K = 0\n\n#TestRun3 #**# STILL NEEDS TO BE SET UP\n  # Read species from file\n  # Test with 1 species\n  # test with 1 environmental layer\n  #Test with landscape extent of 1\n  #Edge type = ABSORBING\n \n#TestRun4 #**# STILL NEEDS TO BE SET UP - USE A RUN FROM STOCHASTIC PLANTS\n  # Test copula function\n  # Include more variation in vital rates\n\n\n#TestRun5 #**# STILL NEEDS TO BE SET UP - Add when doing theoretical traits paper\n  # Generate species\n  # Generate landscape\n  # Test initial location assignment (biomass)\n  # Edge type = ABSORBING\n  # competition.type = 2\n  # 32 species regional,  16 landscape and 4 local\n  # RTD: 8 RTD total, 4 landscape, 2 local (4 x 4 landscape)\n  # Have multiple scenarios, have each scenario test an environmental change type\n\n\n#**# ALSO NEED TO SET UP SOME TESTS THAT WILL FAIL\n  #Do so below, and wrap with a try/catch\n\n# Fail RTD generation\n# Fail conditional landscape variable\n# other important fails?\n\n#**# How to make this more general?? E.g., figure out where R can read example files, and use these as examples\nsetwd(\"C:/docs/beplants/Scripts/spatialdemography/inst/test/\")\nDispPath = \"dt/\"\n\ndev = 0\n\nif (dev == 0) library(spatialdemography)\nif (dev == 1){\n    #For development mode\n    source(\"../../R/spatialdemography.r\")\n    source(\"../../R/simulation.r\")\n    source(\"../../R/sdhelper.r\")\n    #library(multirich)\n    library(Matrix)\n    }\n\n#Source functions that ought to be in popdemo package, but don't work there.\n#source(\"../../stottmatrix.r\") #**# No longer necessary - these functions are in the package now\n\nRunLog = \"RunLog.csv\"\nif (file.exists(RunLog)){\n    unlink(RunLog)\n    }\n\nto.run = c(\"TestRun1\",\"TestRun2\") #,\"TestRun3\",\"TestRun4\",\"TestRun5\" \nrun.lbls = c(\"tr1\",\"tr2\",\"tr3\",\"tr4\",\"tr5\")\nfor (r in 1:length(to.run)){\n#r = 2\n\n    #Set up run name and labels\n    run.name = to.run[r]\n    run.lbl = run.lbls[r]\n\n    # Delete any previous test-run folder/files\n    if (file.exists(run.name)){\n        cat(sprintf(\"Old test run data for %s deleted\\n\", run.name), file = RunLog, append =T)\n        unlink(run.name, recursive = T)\n        }\n\n    # Copy set up files into the appropriate location(s)\n    # get listing of previous files\n    base.dir = sprintf(\"testfiles/%s/\", run.lbl)\n    my.files = test.setup(base.dir, run.name)\n      initial.conditions.file = my.files[[1]]\n      settings.file = my.files[[2]]\n      env.file = my.files[[3]]\n      spfile = my.files[[4]]\n      sp.instr.file = my.files[[5]]\n      sp.resp.instr.file = my.files[[6]]\n      locations.file = my.files[[7]]\n\n    ## Run test & generate output ##\n    # Create a path to store results & create results file\n    file.ending = run.name #Could just put run name into the code, but this makes it faster when troubleshooting\n    run.path = sprintf(\"%s/\",run.name) #Set run path to run name\n    opath = sprintf(\"%s/outputs/\",run.name)\n    dir.create(opath,showWarnings = F)    \n    ResultsFile = sprintf(\"%sResults%s.csv\",opath,file.ending)\n    if (file.exists(ResultsFile)) file.remove(ResultsFile) #delete any existing results file\n\n    landscape.dir = \"default\"\n    if (r == 2){\n        landscape.dir = \"TestRun2/landscape/\"\n        }\n\n    # set up scenarios #sc = 1 #**# Set up for more scenarios when testing multiple scenarios\n    scn = 1 #scns[sc] #Scenario to run\n    s.lbl = \"\" #s.lbls[sc]     #Label for the species file to be created\n\n    #Set seed for random processes, to ensure consistent results\n    set.seed(123456789) #Set seed, to allow consistent results from the random numbers generators.\n\n    #Run SpatialDemography with testing mode (will load seeds to ensure repeatability\n    out.res = SpatialDemography(scn,s.lbl,file.ending,DispPath,run.path,opath,ResultsFile,initial.conditions.file,settings.file,env.file,spfile, sp.instr.file,sp.resp.instr.file, landscape.dir = landscape.dir, locations.file = locations.file, testing = T)\n    \n    # Check generated output for accuracy & report any errors\n    check.outputs(run.name,RunLog)\n    \n    # If no errors, delete test files\n    cat(sprintf(\"%s run successfully with no errors. Deleting generated files.\\n\", run.name), file = RunLog, append = T)\n    unlink(run.name, recursive = T)\n\n    }                 \n\n",
    "created" : 1427812428038.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4116078924",
    "id" : "EAB1D106",
    "lastKnownWriteTime" : 1426182512,
    "path" : "C:/docs/beplants/Scripts/spatialdemography/inst/test/test_spatialdemography.r",
    "project_path" : "inst/test/test_spatialdemography.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}