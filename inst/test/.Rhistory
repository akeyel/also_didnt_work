setwd("C:/docs/beplants/Scripts/")
my.pkg = "spatialdemography" #This will need to be replaced
mpath = sprintf("%s/", my.pkg)
library(roxygen2)
roxygen2::roxygenize(mpath)
library(devtools)
pkg.path = NULL #This defaults to the parent directory of the package, which is what I want
library(myr)
myr:::move.files(my.pkg) # Fix on next rebuild of myr
devtools::check(my.pkg, document = F)
devtools::build(my.pkg,pkg.path,binary = F)
devtools::build(my.pkg,pkg.path,binary = T)
install.packages(my.pkg, type = "source", repos = NULL)
require(myr)
myr:::return.files(my.pkg) # Fix to :: on next build of myr.
if (my.pkg == "spatialdemography"){ library(spatialdemography) }
setwd("C:/docs/beplants/Scripts/spatialdemography/inst/test/")
DispPath = "dt/"
dev = 0
if (dev == 0) library(spatialdemography)
if (dev == 1){
#For development mode
source("../../R/spatialdemography.r")
source("../../R/simulation.r")
source("../../R/sdhelper.r")
#library(multirich)
library(Matrix)
}
#Source functions that ought to be in popdemo package, but don't work there.
#source("../../stottmatrix.r") #**# No longer necessary - these functions are in the package now
RunLog = "RunLog.csv"
if (file.exists(RunLog)){
unlink(RunLog)
}
to.run = c("TestRun1","TestRun2") #,"TestRun3","TestRun4","TestRun5"
run.lbls = c("tr1","tr2","tr3","tr4","tr5")
for (r in 1:length(to.run)){
#r = 2
#Set up run name and labels
run.name = to.run[r]
run.lbl = run.lbls[r]
# Delete any previous test-run folder/files
if (file.exists(run.name)){
cat(sprintf("Old test run data for %s deleted\n", run.name), file = RunLog, append =T)
unlink(run.name, recursive = T)
}
# Copy set up files into the appropriate location(s)
# get listing of previous files
base.dir = sprintf("testfiles/%s/", run.lbl)
my.files = test.setup(base.dir, run.name)
initial.conditions.file = my.files[[1]]
settings.file = my.files[[2]]
env.file = my.files[[3]]
spfile = my.files[[4]]
sp.instr.file = my.files[[5]]
sp.resp.instr.file = my.files[[6]]
locations.file = my.files[[7]]
## Run test & generate output ##
# Create a path to store results & create results file
file.ending = run.name #Could just put run name into the code, but this makes it faster when troubleshooting
run.path = sprintf("%s/",run.name) #Set run path to run name
opath = sprintf("%s/outputs/",run.name)
dir.create(opath,showWarnings = F)
ResultsFile = sprintf("%sResults%s.csv",opath,file.ending)
if (file.exists(ResultsFile)) file.remove(ResultsFile) #delete any existing results file
landscape.dir = "default"
if (r == 2){
landscape.dir = "TestRun2/landscape/"
}
# set up scenarios #sc = 1 #**# Set up for more scenarios when testing multiple scenarios
scn = 1 #scns[sc] #Scenario to run
s.lbl = "" #s.lbls[sc]     #Label for the species file to be created
#Set seed for random processes, to ensure consistent results
set.seed(123456789) #Set seed, to allow consistent results from the random numbers generators.
#Run SpatialDemography with testing mode (will load seeds to ensure repeatability
out.res = SpatialDemography(scn,s.lbl,file.ending,DispPath,run.path,opath,ResultsFile,initial.conditions.file,settings.file,env.file,spfile, sp.instr.file,sp.resp.instr.file, landscape.dir = landscape.dir, locations.file = locations.file, testing = T)
# Check generated output for accuracy & report any errors
check.outputs(run.name,RunLog)
# If no errors, delete test files
cat(sprintf("%s run successfully with no errors. Deleting generated files.\n", run.name), file = RunLog, append = T)
unlink(run.name, recursive = T)
}
