# Loop through species
for (m in 1:n_sp){
if (m != 1){
x.label = ""
y.label = ""
xaxt.val = 'n'
yaxt.val = 'n'
}
# Plot means
sp.name = names(my.df)[m]
sp.means = my.df[[sp.name]]
x = my.df$RunTime
plot(x, sp.means, xlab = x.label, ylab = y.label,
xlim = c(0,x.limit), ylim = c(0, y.limit), pch = pch.vec[m], col = col.vec[m])
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = my.df[[se.name]]
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
par(new = T) #Tell R to add next plot to existing plot
}
segments(6.8,0,6.8,y.limit, lty = 2)
warnings()
dev.off()
x.limit = n_timesteps + 3
y.limit = max(my.df[ , 1:3]) # get maximum value for data set
# replicate Fig 5a with se bars
col.vec = c(4,2,3)
pch.vec = c(15, 16, 17)
x.label = "Time Step"
y.label = "Number of Adults in Landscape"
xaxt.val = yaxt.val = 's'
# Loop through species
for (m in 1:n_sp){
if (m != 1){
x.label = ""
y.label = ""
xaxt.val = 'n'
yaxt.val = 'n'
}
# Plot means
sp.name = names(my.df)[m]
sp.means = my.df[[sp.name]]
x = my.df$RunTime
plot(x, sp.means, xlab = x.label, ylab = y.label,
xlim = c(0,x.limit), ylim = c(0, y.limit), pch = pch.vec[m], col = col.vec[m])
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = my.df[[se.name]]
# Only plot if se is > 0 (this avoids a bunch of error messages!)
if (sp.se != 0){
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
}
par(new = T) #Tell R to add next plot to existing plot
}
segments(6.8,0,6.8,y.limit, lty = 2)
y.limit = 22500
for (m in 1:n_sp){
if (m != 1){
x.label = ""
y.label = ""
xaxt.val = 'n'
yaxt.val = 'n'
}
# Plot means
sp.name = names(my.df)[m]
sp.means = my.df[[sp.name]]
x = my.df$RunTime
plot(x, sp.means, xlab = x.label, ylab = y.label,
xlim = c(0,x.limit), ylim = c(0, y.limit), pch = pch.vec[m], col = col.vec[m])
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = my.df[[se.name]]
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
par(new = T) #Tell R to add next plot to existing plot
}
segments(6.8,0,6.8,y.limit, lty = 2)
n_cells = 4
cell.lst = list(rep(list(NA), n_cells))
cell.lst
warnings()
n_cells = 4
cell.lst = list(rep(list(NA), n_cells))
str(cell.lst)
timestep.lst = list(rep(list(cell.lst), n_timesteps))
str(timestep.lst)
timestep.lst = list(rep(cell.lst, n_timesteps))
str(timestep.lst)
dev.off()
n_cells = 4
cell.lst = list(rep(list(NA), n_cells))
cell.lst = cell.lst[[1]] # Remove extraneous outer list
timestep.lst = list(rep(cell.lst, n_timesteps))
timestep.lst = timestep.lst[[1]] # Remove extraneous outer list
for (i in 1:n_examples){
cell.dat = read.csv(sprintf("spdem_ex2/Example2_%s/SpeciesData.csv", i))
# Restrict to species 3
sp3.dat = cell.dat[cell.dat$Species == 3, ]
# Restrict to adults
sp3.dat = sp3.dat[sp3.dat$LifeStage == "Adults", ]
for (j in 1:n_timesteps){
for (k in 1:n_cells){
if (i == 1){
new.rec = sp3.dat[j , 3 + k] # 3 offsets for 1st 3 columns
}else{
old.rec = timestep.lst[[j]][[k]]
new.rec = c(old.rec, sp3.dat[j , 3 + k])
}
timestep.lst[[j]][[k]] = new.rec # 3 offsets for 1st 3 columns
}
}
}
str(timestep.lst)
n_cells = 4
cell.lst = list(rep(list(NA), n_cells))
cell.lst = cell.lst[[1]] # Remove extraneous outer list
timestep.lst = list(rep(cell.lst, n_timesteps))
timestep.lst = timestep.lst[[1]] # Remove extraneous outer list
str(timestep.lst)
n_cells = 4
cell.lst = list(rep(list(NA), n_cells))
timestep.lst = list(rep(cell.lst, n_timesteps))
timestep.lst = timestep.lst[[1]] # Remove extraneous outer list
str(timestep.lst)
for (i in 1:n_examples){
cell.dat = read.csv(sprintf("spdem_ex2/Example2_%s/SpeciesData.csv", i))
# Restrict to species 3
sp3.dat = cell.dat[cell.dat$Species == 3, ]
# Restrict to adults
sp3.dat = sp3.dat[sp3.dat$LifeStage == "Adults", ]
for (j in 1:n_timesteps){
for (k in 1:n_cells){
if (i == 1){
new.rec = sp3.dat[j , 3 + k] # 3 offsets for 1st 3 columns
}else{
old.rec = timestep.lst[[j]][[k]]
new.rec = c(old.rec, sp3.dat[j , 3 + k])
}
timestep.lst[[j]][[k]] = new.rec # 3 offsets for 1st 3 columns
}
}
}
str(timestep.lst)
my.df = rep(NA, n_timesteps * n_cells * 2)
my.df = matrix(my.df, ncol = (n_cells * 2)) # two columns for each species, one for mean & one for se
rownames(my.df) = seq(1, n_timesteps)
colnames(my.df) = c("cell1.mean", "cell2.mean", "cell3.mean", "cell4.mean", "cell1.se", "cell2.se", "cell3.se", "cell4.se")
for (j in 1:n_timesteps){
for (k in 1:n_cells){
this.rec = time.lst[[j]][[k]]
new.mean = mean(this.rec)
new.se = sd(this.rec) / sqrt(n_examples)
my.df[j, k] = new.mean
my.df[j, k + n_sp] = new.se
}
}
j
k
time.lst[[1]]
my.df = rep(NA, n_timesteps * n_cells * 2)
my.df = matrix(my.df, ncol = (n_cells * 2)) # two columns for each species, one for mean & one for se
rownames(my.df) = seq(1, n_timesteps)
colnames(my.df) = c("cell1.mean", "cell2.mean", "cell3.mean", "cell4.mean", "cell1.se", "cell2.se", "cell3.se", "cell4.se")
for (j in 1:n_timesteps){
for (k in 1:n_cells){
this.rec = timestep.lst[[j]][[k]]
new.mean = mean(this.rec)
new.se = sd(this.rec) / sqrt(n_examples)
my.df[j, k] = new.mean
my.df[j, k + n_sp] = new.se
}
}
head(my.df)
k
my.df = rep(NA, n_timesteps * n_cells * 2)
my.df = matrix(my.df, ncol = (n_cells * 2)) # two columns for each species, one for mean & one for se
rownames(my.df) = seq(1, n_timesteps)
colnames(my.df) = c("cell1.mean", "cell2.mean", "cell3.mean", "cell4.mean", "cell1.se", "cell2.se", "cell3.se", "cell4.se")
for (j in 1:n_timesteps){
for (k in 1:n_cells){
this.rec = timestep.lst[[j]][[k]]
new.mean = mean(this.rec)
new.se = sd(this.rec) / sqrt(n_examples)
my.df[j, k] = new.mean
my.df[j, k + n_cells] = new.se
}
}
head(my.df)
x.limit = 15
y.limit = log(7000,10)
# One point type for each cell
pch.vec = c(1, 6,20,0)
# Same color for each cell to make it clear it is Species 3
col.vec = c(3,3,3,3)
nam = names(my.df)
x = seq(1,n_timesteps)
# Plot Cell 1
sp.means = log(my.df$cell1.mean,10)
plot(x,sp.means,
xlim = c(0,x.limit), ylim = c(0,y.limit),
pch = pch.vec[1], col = col.vec[1],
xlab = "Time Step", ylab = "Log10 Number of Adults of Species 3" )
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = log(my.df[[se.name]], 10)
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
my.df = as.data.frame(my.df)
x.limit = 15
y.limit = log(7000,10)
# One point type for each cell
pch.vec = c(1, 6,20,0)
# Same color for each cell to make it clear it is Species 3
col.vec = c(3,3,3,3)
nam = names(my.df)
x = seq(1,n_timesteps)
# Plot Cell 1
sp.means = log(my.df$cell1.mean,10)
plot(x,sp.means,
xlim = c(0,x.limit), ylim = c(0,y.limit),
pch = pch.vec[1], col = col.vec[1],
xlab = "Time Step", ylab = "Log10 Number of Adults of Species 3" )
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = log(my.df[[se.name]], 10)
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
head(my.df)
sp.se
my.df = rep(NA, n_timesteps * n_cells * 2)
my.df = matrix(my.df, ncol = (n_cells * 2)) # two columns for each species, one for mean & one for se
rownames(my.df) = seq(1, n_timesteps)
colnames(my.df) = c("cell1.mean", "cell2.mean", "cell3.mean", "cell4.mean", "cell1.se", "cell2.se", "cell3.se", "cell4.se")
for (j in 1:n_timesteps){
for (k in 1:n_cells){
this.rec = timestep.lst[[j]][[k]]
this.rec = log(this.rec, 10) # do log transform
new.mean = mean(this.rec)
new.se = sd(this.rec) / sqrt(n_examples)
my.df[j, k] = new.mean
my.df[j, k + n_cells] = new.se
}
}
my.df = as.data.frame(my.df)
## Examine Species 3's performance by cell
x.limit = 15
y.limit = log(7000,10)
# One point type for each cell
pch.vec = c(1, 6,20,0)
# Same color for each cell to make it clear it is Species 3
col.vec = c(3,3,3,3)
nam = names(my.df)
x = seq(1,n_timesteps)
# Plot Cell 1
sp.means = my.df$cell1.mean
plot(x,sp.means,
xlim = c(0,x.limit), ylim = c(0,y.limit),
pch = pch.vec[1], col = col.vec[1],
xlab = "Time Step", ylab = "Log10 Number of Adults of Species 3" )
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = my.df[[se.name]]
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
# Plot Cells 2 - 4
for (i in 2:4){
par(new = T) #Tell R to add next plot to existing plot
this.cell = sprintf("cell%s.mean", i)
sp.means = log(my.df[[this.cell]],10)
plot(x, sp.means,
xlim = c(0,x.limit), ylim = c(0, y.limit),
pch = pch.vec[i], col = col.vec[i], xlab = "", ylab = "",
xaxt = 'n', yaxt = 'n')
# Plot se's
se.name = names(my.df)[i + n_cells]
sp.se = my.df[[se.name]]
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
}
head(my.df)
sp.means = my.df$cell1.mean
plot(x,sp.means,
xlim = c(0,x.limit), ylim = c(0,y.limit),
pch = pch.vec[1], col = col.vec[1],
xlab = "Time Step", ylab = "Log10 Number of Adults of Species 3" )
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = my.df[[se.name]]
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
sp.means = my.df$cell1.mean
plot(x,sp.means,
xlim = c(0,x.limit), ylim = c(0,y.limit),
pch = pch.vec[1], col = col.vec[1],
xlab = "Time Step", ylab = "Log10 Number of Adults of Species 3" )
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = my.df[[se.name]]
head(my.df)
head(my.df)
plot(sp.dat.ad3$TimeStep,log(sp.dat.ad3$Cell1,10),
xlim = c(0,x.limit), ylim = c(0,y.limit),
pch = pch.vec[1], col = col.vec[1],
xlab = "Time Step", ylab = "Log10 Number of Adults of Species 3",
cex = scale.factor, cex.lab = scale.factor)
# Plot Cells 2 - 4
for (i in 2:4){
par(new = T) #Tell R to add next plot to existing plot
this.cell = sprintf("Cell%s", i)
plot(sp.dat.ad3$TimeStep, log(sp.dat.ad3[[this.cell]],10),
xlim = c(0,x.limit), ylim = c(0, y.limit),
pch = pch.vec[i], col = col.vec[i], xlab = "", ylab = "",
xaxt = 'n', yaxt = 'n',
cex = scale.factor, cex.lab = scale.factor)
}
segments(6.8,0,6.8,y.limit, lty = 2)
n_cells = 4
cell.lst = list(rep(list(NA), n_cells))
timestep.lst = list(rep(cell.lst, n_timesteps))
timestep.lst = timestep.lst[[1]] # Remove extraneous outer list
# Read in data from each example
for (i in 1:n_examples){
cell.dat = read.csv(sprintf("spdem_ex2/Example2_%s/SpeciesData.csv", i))
# Restrict to species 3
sp3.dat = cell.dat[cell.dat$Species == 3, ]
# Restrict to adults
sp3.dat = sp3.dat[sp3.dat$LifeStage == "Adults", ]
for (j in 1:n_timesteps){
for (k in 1:n_cells){
if (i == 1){
new.rec = sp3.dat[j , 3 + k] # 3 offsets for 1st 3 columns
}else{
old.rec = timestep.lst[[j]][[k]]
new.rec = c(old.rec, sp3.dat[j , 3 + k])
}
timestep.lst[[j]][[k]] = new.rec # 3 offsets for 1st 3 columns
}
}
}
# Compute mean & sd for each time step & add to a data matrix
my.df = rep(NA, n_timesteps * n_cells * 2)
my.df = matrix(my.df, ncol = (n_cells * 2)) # two columns for each species, one for mean & one for se
rownames(my.df) = seq(1, n_timesteps)
colnames(my.df) = c("cell1.mean", "cell2.mean", "cell3.mean", "cell4.mean", "cell1.se", "cell2.se", "cell3.se", "cell4.se")
for (j in 1:n_timesteps){
for (k in 1:n_cells){
this.rec = timestep.lst[[j]][[k]]
this.rec = log(this.rec, 10) # do log transform
new.mean = mean(this.rec)
new.se = sd(this.rec) / sqrt(n_examples)
my.df[j, k] = new.mean
my.df[j, k + n_cells] = new.se
}
}
my.df = as.data.frame(my.df)
## Examine Species 3's performance by cell
x.limit = 15
y.limit = log(7000,10)
# One point type for each cell
pch.vec = c(1, 6,20,0)
# Same color for each cell to make it clear it is Species 3
col.vec = c(3,3,3,3)
nam = names(my.df)
x = seq(1,n_timesteps)
# Plot Cell 1
sp.means = my.df$cell1.mean
plot(x,sp.means,
xlim = c(0,x.limit), ylim = c(0,y.limit),
pch = pch.vec[1], col = col.vec[1],
xlab = "Time Step", ylab = "Log10 Number of Adults of Species 3" )
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = my.df[[se.name]]
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
# Plot Cells 2 - 4
for (i in 2:4){
par(new = T) #Tell R to add next plot to existing plot
this.cell = sprintf("cell%s.mean", i)
sp.means = log(my.df[[this.cell]],10)
plot(x, sp.means,
xlim = c(0,x.limit), ylim = c(0, y.limit),
pch = pch.vec[i], col = col.vec[i], xlab = "", ylab = "",
xaxt = 'n', yaxt = 'n')
# Plot se's
se.name = names(my.df)[i + n_cells]
sp.se = my.df[[se.name]]
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
}
# Compute mean & sd for each time step & add to a data matrix
my.df = rep(NA, n_timesteps * n_cells * 2)
my.df = matrix(my.df, ncol = (n_cells * 2)) # two columns for each species, one for mean & one for se
rownames(my.df) = seq(1, n_timesteps)
colnames(my.df) = c("cell1.mean", "cell2.mean", "cell3.mean", "cell4.mean", "cell1.se", "cell2.se", "cell3.se", "cell4.se")
for (j in 1:n_timesteps){
for (k in 1:n_cells){
this.rec = timestep.lst[[j]][[k]]
new.mean = mean(this.rec)
new.se = sd(this.rec) / sqrt(n_examples)
my.df[j, k] = new.mean
my.df[j, k + n_cells] = new.se
}
}
my.df = as.data.frame(my.df)
## Examine Species 3's performance by cell
x.limit = 15
y.limit = log(7000,10)
# One point type for each cell
pch.vec = c(1, 6,20,0)
# Same color for each cell to make it clear it is Species 3
col.vec = c(3,3,3,3)
nam = names(my.df)
x = seq(1,n_timesteps)
# Plot Cell 1
sp.means = log(my.df$cell1.mean, 10)
plot(x,sp.means,
xlim = c(0,x.limit), ylim = c(0,y.limit),
pch = pch.vec[1], col = col.vec[1],
xlab = "Time Step", ylab = "Log10 Number of Adults of Species 3" )
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = log(my.df[[se.name]], 10)
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
# Plot Cells 2 - 4
for (i in 2:4){
par(new = T) #Tell R to add next plot to existing plot
this.cell = sprintf("cell%s.mean", i)
sp.means = log(my.df[[this.cell]],10)
plot(x, sp.means,
xlim = c(0,x.limit), ylim = c(0, y.limit),
pch = pch.vec[i], col = col.vec[i], xlab = "", ylab = "",
xaxt = 'n', yaxt = 'n')
# Plot se's
se.name = names(my.df)[i + n_cells]
sp.se = log(my.df[[se.name]], 10)
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
}
x.limit = 15
y.min = -5
y.limit = 10
# One point type for each cell
pch.vec = c(1, 6,20,0)
# Same color for each cell to make it clear it is Species 3
col.vec = c(3,3,3,3)
nam = names(my.df)
x = seq(1,n_timesteps)
# Plot Cell 1
sp.means = log(my.df$cell1.mean, 10)
plot(x,sp.means,
xlim = c(0,x.limit), ylim = c(y.min,y.limit),
pch = pch.vec[1], col = col.vec[1],
xlab = "Time Step", ylab = "Log10 Number of Adults of Species 3" )
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = log(my.df[[se.name]], 10)
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
# Plot Cells 2 - 4
for (i in 2:4){
par(new = T) #Tell R to add next plot to existing plot
this.cell = sprintf("cell%s.mean", i)
sp.means = log(my.df[[this.cell]],10)
plot(x, sp.means,
xlim = c(0,x.limit), ylim = c(y.min, y.limit),
pch = pch.vec[i], col = col.vec[i], xlab = "", ylab = "",
xaxt = 'n', yaxt = 'n')
# Plot se's
se.name = names(my.df)[i + n_cells]
sp.se = log(my.df[[se.name]], 10)
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
}
x.limit = 15
y.min = -2
y.limit = 8
# One point type for each cell
pch.vec = c(1, 6,20,0)
# Same color for each cell to make it clear it is Species 3
col.vec = c(3,3,3,3)
nam = names(my.df)
x = seq(1,n_timesteps)
# Plot Cell 1
sp.means = log(my.df$cell1.mean, 10)
plot(x,sp.means,
xlim = c(0,x.limit), ylim = c(y.min,y.limit),
pch = pch.vec[1], col = col.vec[1],
xlab = "Time Step", ylab = "Log10 Number of Adults of Species 3" )
# Plot se's
se.name = names(my.df)[m + n_sp]
sp.se = log(my.df[[se.name]], 10)
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
# Plot Cells 2 - 4
for (i in 2:4){
par(new = T) #Tell R to add next plot to existing plot
this.cell = sprintf("cell%s.mean", i)
sp.means = log(my.df[[this.cell]],10)
plot(x, sp.means,
xlim = c(0,x.limit), ylim = c(y.min, y.limit),
pch = pch.vec[i], col = col.vec[i], xlab = "", ylab = "",
xaxt = 'n', yaxt = 'n')
# Plot se's
se.name = names(my.df)[i + n_cells]
sp.se = log(my.df[[se.name]], 10)
arrows(x,sp.means,x,(sp.means + sp.se),length = 0.04, angle = 90, xpd = T)
arrows(x,sp.means,x,(sp.means - sp.se),length = 0.04, angle = 90, xpd = T)
}
